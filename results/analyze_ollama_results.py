import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from matplotlib import rcParams
import re

# 设置中文字体支持
rcParams['font.sans-serif'] = ['SimHei', 'Microsoft YaHei', 'DejaVu Sans']
rcParams['axes.unicode_minus'] = False

# 设置SVG输出时保持文本为文本格式（不转换为曲线）
rcParams['svg.fonttype'] = 'none'  # 关键设置：保持文本为文本
rcParams['pdf.fonttype'] = 42      # 同时设置PDF字体类型
rcParams['ps.fonttype'] = 42       # 同时设置PS字体类型

# 读取CSV文件
df = pd.read_csv('ollama_test_results_20250818_044636.csv')

# 数据预处理
# 只保留成功的测试结果
df_success = df[df['status'] == 'success'].copy()

# 提取模型名称（去掉版本号后的部分以便分组）
df_success['model_family'] = df_success['model'].str.extract(r'([^:]+)')[0]
df_success['model_size'] = df_success['model'].str.extract(r':([\\d.]+b)')[0]

# 提取模型规模数值（转换为MB单位）
def extract_model_size_mb(model_name):
    # 提取模型大小，如 "1.5b" -> 1500, "0.5b" -> 500, "270m" -> 270
    size_match = re.search(r':(\\d+\\.?\\d*)([bm])', model_name.lower())
    if size_match:
        size_value = float(size_match.group(1))
        unit = size_match.group(2)
        if unit == 'b':  # billion parameters
            return size_value * 1000  # 转换为MB等效
        elif unit == 'm':  # million parameters
            return size_value
    return 1000  # 默认值

df_success['model_size_mb'] = df_success['model'].apply(extract_model_size_mb)

# 计算效率指标：eval_rate_tps / model_size_mb
df_success['efficiency'] = df_success['eval_rate_tps'] / df_success['model_size_mb']

# 创建新的布局：2行3列，第一行占据整个宽度，第二行分为三个子图
fig = plt.figure(figsize=(20, 12))
# fig.suptitle('Ollama模型性能分析 - eval_rate_tps对比', fontsize=16, fontweight='bold')

# 使用GridSpec来创建自定义布局
from matplotlib.gridspec import GridSpec
gs = GridSpec(2, 3, figure=fig, height_ratios=[1, 1], 
              hspace=0.5, wspace=0.35)  # 进一步增加间距

# 1. 顶部：各模型在四个场景下的自评分堆叠柱状图（积木图）
ax1 = fig.add_subplot(gs[0, :])

# 准备堆叠柱状图数据
scenarios = df_success['scenario'].unique()
models = df_success['model'].unique()

# 计算每个模型在每个场景下的平均自评分
score_data = df_success.groupby(['model', 'scenario'])['self_score'].mean().unstack(fill_value=0)

# 确保所有场景都存在
for scenario in scenarios:
    if scenario not in score_data.columns:
        score_data[scenario] = 0

# 重新排序列以确保一致性
score_data = score_data[scenarios]

# 创建堆叠柱状图
bar_width = 0.6
x_pos = np.arange(len(models))

# 为每个场景设置不同颜色
colors = ['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4']
scenario_colors = {scenario: colors[i % len(colors)] for i, scenario in enumerate(scenarios)}

# 绘制堆叠柱状图
bottom = np.zeros(len(models))
for i, scenario in enumerate(scenarios):
    values = [score_data.loc[model, scenario] if model in score_data.index else 0 for model in models]
    bars = ax1.bar(x_pos, values, bar_width, bottom=bottom, 
                   label=scenario, color=scenario_colors[scenario], alpha=0.8)
    
    # 在每个子柱上添加数值标签
    for j, (bar, value) in enumerate(zip(bars, values)):
        if value > 0:  # 只在有值的地方显示标签
            height = bar.get_height()
            ax1.text(bar.get_x() + bar.get_width()/2., bottom[j] + height/2.,
                    f'{value:.1f}', ha='center', va='center', fontsize=8, fontweight='bold')
    
    bottom += values

# 设置图表属性
# ax1.set_xlabel('模型', fontsize=12)
ax1.set_ylabel('自评分总和', fontsize=12)
ax1.set_title('各模型在四个场景下的自评分堆叠图', fontsize=14, fontweight='bold')
ax1.set_xticks(x_pos)
ax1.set_xticklabels(models, rotation=90, ha='center')
# ax1.legend(title='测试场景', bbox_to_anchor=(1.05, 1), loc='upper left')
ax1.grid(True, alpha=0.3, axis='y')

# 在每个柱子顶部显示总分
for i, model in enumerate(models):
    total_score = sum([score_data.loc[model, scenario] if model in score_data.index else 0 for scenario in scenarios])
    ax1.text(i, total_score + 0.2, f'总分: {total_score:.1f}', 
             ha='center', va='bottom', fontsize=9, fontweight='bold')

# 2. 左下角：模型性能排名（按平均eval_rate_tps）
ax2 = fig.add_subplot(gs[1, 0])
model_avg = df_success.groupby('model')['eval_rate_tps'].agg(['mean', 'std']).sort_values('mean', ascending=True)

y_pos = np.arange(len(model_avg))
ax2.barh(y_pos, model_avg['mean'], xerr=model_avg['std'], 
         color=plt.cm.viridis(np.linspace(0, 1, len(model_avg))))
ax2.set_yticks(y_pos)
ax2.set_yticklabels(model_avg.index)
ax2.set_xlabel('平均 eval_rate_tps (tokens/s)')
# ax2.set_title('模型整体性能排名（带标准差）')

# 去掉右侧和上方框线
ax2.spines['right'].set_visible(False)
ax2.spines['top'].set_visible(False)

# 在柱状图上添加数值标签
for i, (mean_val, std_val) in enumerate(zip(model_avg['mean'], model_avg['std'])):
    ax2.text(mean_val + std_val + 100, i, f'{mean_val:.1f}±{std_val:.1f}', 
             va='center', fontsize=9)

# 3. 中下角：平均性能对比热力图
ax3 = fig.add_subplot(gs[1, 1])
pivot_data = df_success.groupby(['model', 'scenario'])['eval_rate_tps'].mean().unstack(fill_value=0)

sns.heatmap(pivot_data, annot=True, fmt='.1f', cmap='YlOrRd', ax=ax3)
# ax3.set_title('各模型在不同场景下的平均eval_rate_tps热力图')
ax3.set_xlabel('测试场景')
ax3.set_ylabel('模型')
# 设置横轴标签倾斜30度，并调整位置
ax3.tick_params(axis='x', rotation=30, labelsize=9)
ax3.tick_params(axis='y', labelsize=9)
# 调整热力图的边距
ax3.margins(x=0.01, y=0.01)

# 4. 右下角：模型效率对比图（eval_rate_tps / 模型规模）
ax4 = fig.add_subplot(gs[1, 2])

# 计算每个模型的平均效率
efficiency_data = df_success.groupby(['model', 'scenario'])['efficiency'].mean().unstack(fill_value=0)

# 确保所有场景都存在
for scenario in scenarios:
    if scenario not in efficiency_data.columns:
        efficiency_data[scenario] = 0

# 重新排序列以确保一致性
efficiency_data = efficiency_data[scenarios]

# 创建效率堆叠柱状图
bar_width = 0.6
x_pos_eff = np.arange(len(models))

# 绘制效率堆叠柱状图
bottom_eff = np.zeros(len(models))
for i, scenario in enumerate(scenarios):
    values_eff = [efficiency_data.loc[model, scenario] if model in efficiency_data.index else 0 for model in models]
    bars_eff = ax4.bar(x_pos_eff, values_eff, bar_width, bottom=bottom_eff, 
                       label=scenario, color=scenario_colors[scenario], alpha=0.8)
    
    # 在每个子柱上添加数值标签
    for j, (bar, value) in enumerate(zip(bars_eff, values_eff)):
        if value > 0.1:  # 只在有明显值的地方显示标签
            height = bar.get_height()
            ax4.text(bar.get_x() + bar.get_width()/2., bottom_eff[j] + height/2.,
                    f'{value:.1f}', ha='center', va='center', fontsize=7, fontweight='bold')
    
    bottom_eff += values_eff

# 设置效率图表属性
ax4.set_xlabel('模型', fontsize=12)
ax4.set_ylabel('效率 (tokens/s per MB)', fontsize=12)
# ax4.set_title('(eval_rate_tps / 模型规模)', fontsize=12, fontweight='bold')
ax4.set_xticks(x_pos_eff)
ax4.set_xticklabels(models, rotation=90, ha='center')
ax4.grid(True, alpha=0.3, axis='y')

# 在每个柱子顶部显示总效率
for i, model in enumerate(models):
    total_efficiency = sum([efficiency_data.loc[model, scenario] if model in efficiency_data.index else 0 for scenario in scenarios])
    ax4.text(i, total_efficiency + 0.1, f'{total_efficiency:.1f}', 
             ha='center', va='bottom', fontsize=8, fontweight='bold')

# 在plt.tight_layout()之前添加更大的子图间距调整
plt.subplots_adjust(hspace=0.5, wspace=0.35, bottom=0.15, top=0.90, left=0.08, right=0.95)
plt.tight_layout(pad=2.0)  # 增加padding
# 保存为SVG格式，文本保持为文本
fig.savefig('ollama_performance_analysis.svg', format='svg', bbox_inches='tight', dpi=300)
print("主要分析图表已保存为: ollama_performance_analysis.svg")
plt.show()

# 生成详细统计报告
print("=" * 60)
print("Ollama模型性能分析报告")
print("=" * 60)

print("\\n1. 模型整体性能排名（按平均eval_rate_tps）:")
print("-" * 40)
for model, stats in model_avg.sort_values('mean', ascending=False).iterrows():
    print(f"{model:20s}: {stats['mean']:8.1f} ± {stats['std']:6.1f} tokens/s")

print("\\n2. 模型自评分统计:")
print("-" * 40)
model_scores = df_success.groupby('model')['self_score'].agg(['mean', 'std', 'count'])
for model, stats in model_scores.sort_values('mean', ascending=False).iterrows():
    print(f"{model:20s}: {stats['mean']:6.1f} ± {stats['std']:4.1f} (样本数: {stats['count']})")

print("\\n3. 场景性能统计:")
print("-" * 40)
scenario_stats = df_success.groupby('scenario')['eval_rate_tps'].agg(['mean', 'std', 'count'])
for scenario, stats in scenario_stats.sort_values('mean', ascending=False).iterrows():
    print(f"{scenario:15s}: {stats['mean']:8.1f} ± {stats['std']:6.1f} tokens/s (样本数: {stats['count']})")

print("\\n4. 场景自评分统计:")
print("-" * 40)
scenario_scores = df_success.groupby('scenario')['self_score'].agg(['mean', 'std', 'count'])
for scenario, stats in scenario_scores.sort_values('mean', ascending=False).iterrows():
    print(f"{scenario:15s}: {stats['mean']:6.1f} ± {stats['std']:4.1f} (样本数: {stats['count']})")

print("\\n5. 最佳性能组合:")
print("-" * 40)
best_combinations = df_success.groupby(['model', 'scenario'])['eval_rate_tps'].mean().sort_values(ascending=False).head(10)
for (model, scenario), rate in best_combinations.items():
    print(f"{model:20s} + {scenario:15s}: {rate:8.1f} tokens/s")

print("\\n6. 模型家族对比:")
print("-" * 40)
family_stats = df_success.groupby('model_family')['eval_rate_tps'].agg(['mean', 'std', 'count'])
for family, stats in family_stats.sort_values('mean', ascending=False).iterrows():
    print(f"{family:15s}: {stats['mean']:8.1f} ± {stats['std']:6.1f} tokens/s (样本数: {stats['count']})")

# 保存详细数据到CSV
detailed_stats = df_success.groupby(['model', 'scenario']).agg({
    'eval_rate_tps': ['mean', 'std', 'min', 'max', 'count'],
    'self_score': ['mean', 'std'],
    'total_duration_raw': 'mean',
    'load_duration_sec': 'mean'
}).round(2)

detailed_stats.columns = ['_'.join(col).strip() for col in detailed_stats.columns]
detailed_stats.to_csv('ollama_performance_analysis.csv')
print(f"\\n详细分析结果已保存到: ollama_performance_analysis.csv")

# 创建交互式性能对比图
fig2, ax = plt.subplots(figsize=(14, 8))

# 为每个模型创建不同的标记和颜色
markers = ['o', 's', '^', 'D', 'v', '<', '>', 'p', '*', 'h']
colors = plt.cm.tab10(np.linspace(0, 1, len(models)))

for i, model in enumerate(models):
    model_data = df_success[df_success['model'] == model]
    scenario_means = model_data.groupby('scenario')['eval_rate_tps'].mean()
    
    ax.plot(range(len(scenario_means)), scenario_means.values, 
            marker=markers[i % len(markers)], 
            color=colors[i], 
            linewidth=2, 
            markersize=8, 
            label=model)

ax.set_xticks(range(len(scenarios)))
ax.set_xticklabels(scenarios, rotation=30)
ax.set_ylabel('平均 eval_rate_tps (tokens/s)')
ax.set_title('各模型在不同场景下的性能趋势对比')
ax.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
ax.grid(True, alpha=0.3)

plt.tight_layout()
# 保存趋势对比图为SVG格式
fig2.savefig('ollama_performance_trends.svg', format='svg', bbox_inches='tight', dpi=300)
print("性能趋势对比图已保存为: ollama_performance_trends.svg")
plt.show()

print("\\n7. 模型效率统计（tokens/s per MB）:")
print("-" * 40)
model_efficiency = df_success.groupby('model')['efficiency'].agg(['mean', 'std', 'count'])
for model, stats in model_efficiency.sort_values('mean', ascending=False).iterrows():
    print(f"{model:20s}: {stats['mean']:6.2f} ± {stats['std']:4.2f} (样本数: {stats['count']})")

print("\n分析完成！图表已显示，详细数据已保存。")
print("SVG文件已导出，文本保持为可编辑的文本格式。")
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show()
plt.show